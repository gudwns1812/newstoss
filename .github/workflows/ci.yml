# 워크플로우 이름
name: Spring Boot CI with Gradle and ECR Push

# 워크플로우가 실행될 이벤트 정의
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

# OIDC 인증을 위한 권한 설정
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "corretto"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: |
          echo "Starting build process..."
          ./gradlew clean build -x test
          echo "Build completed"
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KIS_APPKEY: ${{ secrets.KIS_APP_KEY }}
          KIS_APPSECRET: ${{ secrets.KIS_APP_SECRET }}
          KIS_GRANT_TYPE: client_credentials
          KIS_TOKEN_URL: https://openapi.koreainvestment.com:9443/oauth2/token
          MANAGEMENT_SERVER_PORT: ${{ secrets.MANAGEMENT_SERVER_PORT }}
          MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${{ secrets.MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE }}
          MANAGEMENT_ENDPOINT_HEALTH_SHOWDETAILS: ${{ secrets.MANAGEMENT_ENDPOINT_HEALTH_SHOWDETAILS }}
          MANAGEMENT_INFO_JAVA_ENABLED: ${{ secrets.MANAGEMENT_INFO_JAVA_ENABLED }}
          MANAGEMENT_INFO_OS_ENABLED: ${{ secrets.MANAGEMENT_INFO_OS_ENABLED }}

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            .gradle/
          retention-days: 1

  deploy:
    name: Deploy to ECR
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsSession-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Find built JAR file
        id: find_jar
        run: |
          JAR_PATH=$(find build/libs -name "*.jar" -print -quit)
          if [ -z "$JAR_PATH" ]; then
             echo "Error: JAR file not found in build/libs directory!"
             exit 1
          fi
          echo "Found JAR file at: ${JAR_PATH}"
          echo "JAR_FILE_RELATIVE_PATH=${JAR_PATH}" >> $GITHUB_ENV

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          build-args: |
            JAR_FILE=${{ env.JAR_FILE_RELATIVE_PATH }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
