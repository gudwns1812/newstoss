# 워크플로우 이름
name: Spring Boot CI with Gradle and ECR Push

# 워크플로우가 실행될 이벤트 정의
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

# OIDC 인증을 위한 권한 설정
permissions:
  id-token: write
  contents: read

jobs:
  ci_check:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "corretto"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: |
          echo "Starting build process..."
          ./gradlew clean build -x test
          echo "Build completed"
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_SQL_INIT_MODE: always
          SPRING_SECURITY_USER_NAME: test
          SPRING_SECURITY_USER_PASSWORD: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KIS_APPKEY: ${{ secrets.KIS_APP_KEY }}
          KIS_APPSECRET: ${{ secrets.KIS_APP_SECRET }}
          KIS_GRANT_TYPE: client_credentials
          KIS_TOKEN_URL: https://openapi.koreainvestment.com:9443/oauth2/token
          TEST_ENVIRONMENT: ci

      - name: Configure AWS credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsSession-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Find built JAR file
        if: github.event_name == 'push'
        id: find_jar
        run: |
          JAR_PATH=$(find build/libs -name "*.jar" -print -quit)
          if [ -z "$JAR_PATH" ]; then
             echo "Error: JAR file not found in build/libs directory!"
             exit 1
          fi
          echo "Found JAR file at: ${JAR_PATH}"
          echo "JAR_FILE_RELATIVE_PATH=${JAR_PATH}" >> $GITHUB_ENV

      - name: Build and push Docker image to ECR
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/newstoss/repo:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/newstoss/repo:${{ github.sha }}
          build-args: |
            JAR_FILE=${{ env.JAR_FILE_RELATIVE_PATH }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
