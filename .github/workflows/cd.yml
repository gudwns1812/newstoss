# 워크플로우 이름
name: Spring Boot Docker CD to EC2

# 워크플로우가 실행될 이벤트 정의
on:
  workflow_run:
    workflows:
      - "Spring Boot CI with Gradle and ECR Push"
    types:
      - completed
    branches:
      - main

# OIDC 인증을 위한 권한 설정
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to EC2 via Docker
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug Workflow Run
        run: |
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow Run Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow Run Status: ${{ github.event.workflow_run.status }}"
          echo "Workflow Run Head Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Workflow Run Head SHA: ${{ github.event.workflow_run.head_sha }}"

      - name: Checkout code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정 (ECR에서 이미지 Pull 받기 위해 필요)
      # CI 워크플로우에서 사용한 Role (ECR 푸시 권한)과 동일하거나,
      # ECR 이미지 Pull 권한만 가진 다른 Role을 사용해도 됩니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # 최신 버전 확인 권장
        with:
          # CD 실행용 IAM Role ARN (GitHub Secret) - ECR Pull 권한 필요
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_CD }} # CI Role과 분리하려면 이름 변경
          aws-region: ${{ secrets.AWS_REGION }} # AWS 리전 (GitHub Secret)
          # Role Session Name 설정 (CloudTrail 로그에 표시)
          role-session-name: GitHubActionsCD-${{ github.run_id }}-${{ github.run_attempt }}

      # 3. EC2로 배포 (SSH 접속 및 Docker 명령어 실행)
      # appleboy/ssh-action 액션을 사용하여 EC2에 SSH 접속 후 배포 스크립트를 실행합니다.
      # EC2 접속 정보는 GitHub Secrets에 등록해야 합니다.
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10 # 최신 버전 확인 권장
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스의 퍼블릭 IP 또는 도메인
          username: ${{ secrets.EC2_USER }} # EC2 인스턴스 접속 사용자 이름 (예: ubuntu, ec2-user)
          key: ${{ secrets.EC2_SSH_KEY }} # GitHub Secrets에 저장된 SSH Private Key 내용
          # secrets: EC2_PASSWORD # 암호로 접속 시 사용 (키 사용 권장)
          script: |

            ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
            ECR_REPOSITORY="newstoss/repo" 

            IMAGE_TAG="${{ github.event.workflow_run.sha }}"
            FULL_IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"


            CONTAINER_NAME="newstoss-app" 
            HOST_APP_PORT=8080 
            CONTAINER_APP_PORT=8080 


            PG_CONTAINER_NAME="my-postgres" 
            DOCKER_NETWORK_NAME="my-app-network"

            echo "Deploying Docker image ${FULL_IMAGE_URI} to EC2..."


            echo "Logging in to ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY} || { echo "ECR Login failed!"; exit 1; }

            echo "Pulling new image ${FULL_IMAGE_URI}..."
            docker pull ${FULL_IMAGE_URI} || { echo "Docker pull failed!"; exit 1; }

            echo "Stopping and removing old container ${CONTAINER_NAME}..."
            # 실행 중인 컨테이너가 있는지 확인하고 있으면 중지 및 삭제
            if docker ps -a -f name=${CONTAINER_NAME} -q | grep .; then
              docker stop ${CONTAINER_NAME} || true # 중지 실패해도 다음 단계 진행
              docker rm ${CONTAINER_NAME} || true  # 삭제 실패해도 다음 단계 진행
              echo "Old container stopped and removed."
            else
              echo "No existing container ${CONTAINER_NAME} found."
            fi


            echo "Running new container ${CONTAINER_NAME}..."

            docker run -d \
              -p ${HOST_APP_PORT}:${CONTAINER_APP_PORT} \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK_NAME} \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e KIS_APPKEY="${{ secrets.KIS_APP_KEY }}" \
              -e KIS_APPSECRET="${{ secrets.KIS_APP_SECRET }}" \
              -e KIS_GRANT_TYPE=client_credentials \
              -e KIS_TOKEN_URL=https://openapi.koreainvestment.com:9443/oauth2/token \
              # 필요한 다른 운영 환경 변수 추가...
              ${FULL_IMAGE_URI} || { echo "Docker run failed!"; exit 1; }

            echo "New container ${CONTAINER_NAME} started with image ${FULL_IMAGE_URI}."

            sleep 20 # 컨테이너 시작 및 앱 구동 시간 고려하여 충분히 대기
            echo "Checking container status..."
            docker ps -f name=${CONTAINER_NAME} || { echo "Container is not running!"; exit 1; }

            echo "Performing health check..."
            curl -f http://127.0.0.1:${HOST_APP_PORT}/actuator/health || { echo "Health check failed after deployment!"; exit 1; }

            echo "Pruning unused Docker images..."
            docker image prune -f || true # 이미지 정리 실패해도 배포 자체는 성공으로 간주 (선택 사항)

            echo "Deployment completed successfully!"
